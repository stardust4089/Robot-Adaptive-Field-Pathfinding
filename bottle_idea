import math
from bottle import Bottle, run, static_file, request

# Create a Bottle application
app = Bottle()

# Define the size of the grid
grid_width = 165
grid_height = 80
square_size = 0  # Size of each square in pixels

# Define the colors
color_normal = "gray"  # Color for normal squares
color_clicked = "blue"  # Color for clicked squares
color_obstacle = "red"  # Color for obstacle squares

# Create an empty array to store the clicked points
points = []
obstacles = []

# Function to handle mouse clicks
@app.post("/add_point")
def add_point():
    global points, obstacles

    # Get the x and y coordinates from the request data
    x = int(request.forms.get("x"))
    y = int(request.forms.get("y"))
    point = (x, y)

    # Check if the point is already in the array
    if point in points or point in obstacles:
        # Remove the point from the array
        points.remove(point)
    else:
        # Add the point to the array
        points.append(point)

    # Check if the point is an obstacle
    if request.forms.get("obstacle") == "true":
        if point in obstacles:
            obstacles.remove(point)
        else:
            obstacles.append(point)

    # Return the updated points and obstacles as JSON
    return {"points": points, "obstacles": obstacles}

# Function to serve the static files (HTML, CSS, JS)
@app.route("/static/<filename:path>")
def serve_static(filename):
    return static_file(filename, root="static")

# Function to construct the shape and color the lines between the points
def construct_shape():
    global shape_points, obstacles
    # Get the coordinates of the shape points
    x1, y1 = shape_points[0]
    x2, y2 = shape_points[1]
    x3, y3 = shape_points[2]
    x4, y4 = shape_points[3]

    points = []

    points += bresenham_line(x1, y1, x2, y2)
    points += bresenham_line(x2, y2, x3, y3)
    points += bresenham_line(x3, y3, x4, y4)
    points += bresenham_line(x4, y4, x1, y1)
    points += bresenham_line(x1, y1, x3, y3)
    points += bresenham_line(x2, y2, x4, y4)

    for point in points:
        if point not in obstacles:
            obstacles.append(point)

    # Clear the shape points
    shape_points = []

# Function to calculate Bresenham line algorithm
def bresenham_line(x0, y0, x1, y1):
    points = []
    dx = abs(x1 - x0)
    dy = abs(y1 - y0)
    sx = -1 if x0 > x1 else 1
    sy = -1 if y0 > y1 else 1
    err = dx - dy

    while True:
        points.append((x0, y0))

        if x0 == x1 and y0 == y1:
            break

        e2 = 2 * err
        if e2 > -dy:
            err -= dy
            x0 += sx
        if e2 < dx:
            err += dx
            y0 += sy

    return points

# Route to the main page
@app.route("/")
def main_page():
    return static_file("index.html", root="static")

if __name__ == "__main__":
    # Calculate the square size based on the grid size and screen size
    screen_width = 800  # Replace with the actual screen width
    screen_height = 600  # Replace with the actual screen height
    square_size = min(math.floor(screen_width / grid_width), math.floor(screen_height / grid_height))

    # Run the Bottle application
    run(app, host="localhost", port=8080)
