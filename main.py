import json
import math
from queue import PriorityQueue
#from nicegui import ui
#from nicegui.events import MouseEventArguments
class Shape:
    # POINT INPUT MUST BE IN COUNTER CLOCKWISE ORDER
    def __init__(self, p1, p2, p3, p4):
        self.points = [p1, p2, p3, p4]

    def is_inside(self, point):
        x, y = point

        # Calculate the cross products of the vectors formed by each consecutive pair of points
        cross_products = []
        for i in range(4):
            p1, p2 = self.points[i], self.points[(i + 1) % 4]
            cross_product = (p2[0] - p1[0]) * (y - p1[1]) - (p2[1] - p1[1]) * (x - p1[0])
            cross_products.append(cross_product)

        # If all cross products have the same sign, the point is inside the shape
        return all(cp >= 0 for cp in cross_products) or all(cp <= 0 for cp in cross_products)
"""
def mouse_handler(e: MouseEventArguments):
    color = 'SkyBlue' if e.type == 'mousedown' else 'SteelBlue'
    # ui.notify(f'{e.type} at ({e.image_x:.1f}, {e.image_y:.1f})')
    OBSTACLES.append((e.image_x / 10, e.image_y / 10))
    for beans in OBSTACLES:
        x = beans[0] * 10
        y = beans[1] * 10
        ii.content += f'<circle cx="{x}" cy="{y}" r="15" fill="none" stroke="{color}" stroke-width="4" />'
"""
"""
    
ui.label('Hello NiceGUI!')
src = 'http://stealthyscouting.com/field23_1_1_1650x800.png'
ii = ui.interactive_image(src, on_mouse=mouse_handler, events=['mousedown', 'mouseup'], cross=True)
"""
# ui.run()

# Define your grid dimensions, start point, and goal point
# decimeters    
GRID_WIDTH = (165)
GRID_HEIGHT = (80)
START = (0, 0)
GOAL = (160, 70)

# Define your obstacle positions
# You can represent obstacles as a list of coordinates or any other suitable data structure
NO_GO = []
OBSTACLES = [(132, 39), (50, 6), (82, 38), (19, 18), (124, 40), (115, 71), (75, 35), (135, 49), (116, 72), (3, 15), (14, 24), (148, 24), (59, 32), (151, 29), (78, 45), (90, 19), (150, 70), (15, 25), (134, 62), (131, 56), (91, 20), (123, 52), (115, 48), (60, 32), (64, 2), (124, 53), (116, 49), (135, 62), (14, 1), (37, 21), (150, 47), (15, 2), (132, 29), (79, 23), (52, 5), (44, 1), (115, 61), (75, 25), (135, 39), (25, 24), (53, 6), (128, 36), (66, 61), (118, 71), (78, 35), (97, 48), (17, 25), (150, 60), (142, 56), (134, 52), (131, 46), (41, 9), (25, 1), (10, 21), (2, 17), (37, 11), (3, 18), (89, 21), (149, 72), (150, 37), (26, 1), (59, 35), (134, 65), (144, 78), (123, 55), (115, 51), (62, 45), (81, 58), (122, 59), (32, 22), (55, 5), (86, 29), (65, 55), (150, 50), (28, 24), (134, 42), (6, 5), (81, 35), (125, 78), (2, 7), (122, 72), (66, 28), (126, 42), (130, 49), (150, 27), (28, 1), (47, 14), (118, 74), (119, 39), (151, 71), (9, 24), (29, 2), (145, 33), (115, 41), (93, 22), (147, 78), (107, 42), (99, 38), (9, 1), (28, 14), (134, 32), (121, 62), (100, 39), (141, 40), (31, 24), (137, 42), (84, 36), (130, 39), (55, 8), (128, 78), (120, 74), (65, 58), (151, 61), (69, 28), (141, 53), (125, 45), (31, 1), (91, 52), (122, 39), (12, 24), (32, 2), (87, 54), (88, 19), (147, 68), (129, 56), (61, 1), (148, 69), (132, 61), (151, 74), (58, 32), (144, 35), (62, 2), (102, 38), (133, 62), (125, 58), (12, 1), (31, 14), (103, 39), (13, 2), (128, 68), (129, 33), (120, 64), (139, 77), (140, 42), (151, 51), (42, 1), (121, 65), (133, 39), (71, 64), (131, 78), (75, 34), (20, 18), (23, 23), (43, 1), (116, 71), (1, 4), (151, 28), (76, 34), (15, 24), (120, 77), (151, 64), (144, 25), (91, 19), (60, 31), (124, 52), (135, 61), (95, 25), (37, 20), (65, 2), (15, 1), (132, 28), (151, 41), (142, 78), (61, 4), (133, 29), (63, 50), (75, 24), (94, 37), (135, 38), (53, 5), (25, 23), (45, 1), (124, 65), (143, 78), (116, 61), (136, 39), (22, 17), (128, 35), (66, 60), (78, 34), (49, 7), (150, 59), (129, 36), (26, 23), (67, 61), (18, 19), (119, 71), (79, 35), (123, 77), (115, 73), (135, 51), (147, 25), (116, 74), (117, 39), (3, 17), (59, 34), (151, 31), (38, 11), (90, 21), (150, 72), (7, 23), (134, 64), (27, 1), (123, 54), (115, 50), (145, 78), (56, 0), (116, 51), (74, 54), (86, 28), (78, 24), (57, 1), (97, 37), (150, 49), (134, 41), (29, 24), (134, 77), (123, 67), (115, 63), (2, 6), (135, 41), (37, 0), (130, 48), (150, 26), (66, 63), (67, 28), (126, 77), (118, 73), (70, 33), (150, 62), (29, 1), (134, 54), (40, 10), (119, 74), (131, 48), (63, 30), (115, 40), (44, 16), (116, 41), (2, 19), (139, 24), (59, 1), (97, 27), (89, 23), (149, 74), (150, 39), (59, 37), (100, 38), (131, 25), (29, 14), (61, 46), (80, 59), (60, 1), (104, 44), (115, 53), (62, 47), (122, 61), (73, 56), (25, 16), (85, 30), (32, 24), (137, 77), (65, 57), (129, 78), (134, 44), (40, 0), (141, 52), (69, 63), (21, 23), (2, 9), (149, 28), (74, 34), (126, 44), (13, 24), (118, 40), (150, 29), (142, 25), (88, 54), (151, 73), (58, 31), (133, 61), (104, 34), (103, 38), (85, 20), (13, 1), (130, 28), (126, 57), (59, 4), (134, 34), (129, 68), (121, 64), (140, 77), (92, 37), (20, 17), (125, 70), (43, 0), (122, 64), (1, 3), (72, 63), (24, 23), (16, 19), (96, 48), (151, 63), (77, 34), (68, 65), (121, 77), (133, 51), (125, 47), (11, 25), (144, 60), (145, 25), (95, 24), (96, 25), (147, 70), (118, 43), (151, 40), (38, 20), (129, 58), (61, 3), (148, 71), (151, 76), (58, 34), (62, 4), (54, 0), (143, 77), (95, 37), (127, 69), (46, 1), (129, 35), (120, 66), (132, 40), (151, 53), (70, 65), (98, 47), (50, 7), (121, 67), (27, 23), (124, 77), (116, 73), (1, 6), (148, 25), (46, 14), (151, 30), (117, 74), (150, 71), (7, 22), (132, 53), (23, 2), (64, 3), (124, 54), (116, 50), (135, 63), (57, 0), (128, 60), (132, 30), (151, 43), (58, 1), (98, 37), (63, 52), (115, 62), (135, 40), (4, 2), (116, 63), (136, 41), (128, 37), (139, 46), (66, 62), (38, 0), (150, 61), (142, 57), (67, 63), (119, 73), (71, 33), (131, 47), (63, 29), (41, 10), (143, 57), (115, 75), (116, 40), (135, 53), (37, 12), (117, 41), (3, 19), (89, 22), (149, 73), (150, 38), (140, 24), (26, 2), (59, 36), (150, 74), (60, 0), (104, 43), (123, 56), (115, 52), (73, 55), (25, 15), (85, 29), (116, 53), (138, 77), (150, 51), (7, 2), (134, 43), (41, 0), (81, 36), (115, 65), (2, 8), (135, 43), (127, 39), (122, 73), (66, 29), (130, 50), (150, 28), (142, 24), (118, 75), (119, 40), (9, 25), (134, 56), (143, 24), (115, 42), (10, 25), (2, 21), (108, 39), (126, 56), (59, 3), (86, 20), (150, 41), (28, 15), (134, 33), (92, 36), (131, 27), (141, 77), (60, 3), (10, 2), (137, 43), (62, 49), (122, 63), (138, 44), (130, 40), (55, 9), (65, 59), (17, 19), (134, 46), (141, 54), (144, 59), (69, 65), (81, 39), (122, 40), (12, 25), (2, 11), (66, 32), (126, 46), (99, 29), (118, 42), (150, 31), (129, 57), (148, 70), (100, 30), (151, 75), (58, 33), (77, 46), (21, 2), (125, 59), (39, 19), (130, 30), (96, 37), (128, 69), (139, 78), (151, 52), (121, 66), (133, 40), (73, 25), (137, 46), (23, 24), (51, 6), (95, 49), (1, 5), (117, 73), (76, 35), (120, 78), (151, 65), (80, 41), (8, 22), (133, 53), (125, 49), (144, 62), (23, 1), (4, 24), (24, 2), (128, 59), (88, 23), (151, 42), (58, 0), (76, 48), (61, 5), (133, 30), (79, 59), (63, 51), (94, 38), (4, 1), (124, 66), (116, 62), (136, 40), (139, 45), (64, 51), (76, 25), (120, 68), (26, 24), (67, 62), (151, 55), (125, 39), (123, 78), (143, 56), (115, 74), (135, 52), (45, 15), (116, 75), (117, 40), (120, 45), (151, 32), (68, 34), (150, 73), (129, 50), (101, 31), (121, 46), (7, 24), (141, 24), (27, 2), (131, 59), (102, 32), (105, 43), (56, 1), (75, 51), (116, 52), (127, 61), (87, 25), (74, 55), (97, 38), (7, 1), (134, 78), (8, 2), (123, 68), (115, 64), (135, 42), (127, 38), (37, 1), (116, 65), (128, 39), (139, 48), (126, 78), (70, 34), (150, 63), (134, 55), (67, 65), (146, 65), (10, 24), (116, 42), (2, 20), (135, 55), (139, 25), (3, 21), (149, 75), (150, 40), (59, 38), (131, 26), (150, 76), (29, 15), (10, 1), (143, 36), (115, 54), (62, 48), (73, 57), (25, 17), (85, 31), (137, 78), (138, 43), (56, 4), (89, 37), (17, 18), (150, 53), (134, 45), (40, 1), (131, 39), (69, 64), (21, 24), (81, 38), (73, 34), (52, 11), (115, 67), (2, 10), (127, 41), (74, 35), (126, 45), (13, 25), (150, 30), (118, 77), (134, 58), (21, 1), (146, 32), (104, 35), (115, 44), (85, 21), (2, 23), (130, 29), (22, 1), (150, 43), (36, 21), (142, 39), (134, 35), (140, 78), (131, 29), (52, 1), (125, 71), (137, 45), (122, 65), (74, 25), (72, 64), (138, 46), (24, 24), (96, 49), (47, 7), (77, 35), (68, 66), (48, 8), (121, 78), (80, 40), (92, 51), (133, 52), (125, 48), (144, 61), (145, 62), (4, 23), (24, 1), (96, 26), (36, 11), (134, 25), (129, 59), (148, 72), (5, 23), (151, 77), (58, 35), (77, 48), (54, 1), (133, 65), (95, 38), (130, 32), (76, 24), (55, 1), (120, 67), (151, 54), (9, 7), (27, 24), (132, 77), (133, 42), (6, 1), (94, 50), (124, 78), (35, 0), (1, 7), (46, 15), (117, 75), (68, 33), (132, 54), (151, 67), (69, 34), (42, 17), (61, 30), (8, 24), (125, 51), (39, 11), (137, 25), (75, 50), (135, 64), (106, 37), (88, 25), (151, 44), (78, 60), (98, 38), (8, 1), (133, 32), (63, 53), (102, 44), (4, 3), (23, 16), (84, 32), (116, 64), (135, 77), (87, 37), (128, 38), (139, 47), (64, 53), (38, 1), (129, 39), (140, 48), (67, 64), (132, 44), (151, 57), (71, 34), (19, 23), (146, 64), (39, 1), (143, 58), (135, 54), (72, 34), (64, 30), (116, 77), (117, 42), (3, 20), (148, 29), (140, 25), (151, 34), (98, 28), (150, 75), (123, 57), (83, 21), (146, 77), (116, 54), (138, 78), (57, 4), (49, 0), (89, 36), (150, 52), (26, 16), (90, 37), (41, 1), (52, 10), (115, 66), (135, 44), (127, 40), (116, 67), (22, 23), (14, 19), (151, 24), (150, 65), (134, 57), (119, 77), (63, 33), (143, 25), (115, 43), (146, 67), (105, 35), (124, 48), (116, 44), (2, 22), (135, 57), (108, 40), (147, 31), (85, 56), (86, 21), (3, 23), (149, 77), (150, 42), (142, 38), (18, 2), (131, 28), (141, 78), (52, 0), (115, 56), (33, 23), (53, 1), (93, 37), (138, 45), (126, 70), (130, 77), (150, 55), (134, 47), (48, 7), (119, 67), (69, 66), (81, 40), (44, 9), (145, 61), (2, 12), (122, 77), (66, 33), (150, 32), (134, 24), (119, 44), (63, 0), (77, 47), (6, 23), (115, 46), (135, 24), (130, 31), (35, 22), (55, 0), (96, 38), (9, 6), (77, 24), (28, 19), (77, 60), (73, 26), (133, 77), (2, 2), (36, 0), (151, 66), (69, 33), (80, 42), (125, 50), (39, 10), (137, 24), (62, 30), (66, 0), (4, 25), (138, 25), (43, 16), (35, 12), (88, 24), (76, 49), (5, 25), (132, 66), (133, 31), (61, 42), (84, 31), (75, 62), (103, 44), (122, 57), (87, 36), (24, 16), (64, 52), (136, 77), (88, 37), (120, 69), (99, 46), (5, 2), (151, 56), (121, 70), (133, 44), (125, 40), (39, 0), (20, 23), (72, 33), (64, 29), (149, 24), (116, 76), (1, 9), (151, 33), (117, 77), (129, 51), (121, 47), (7, 25), (141, 25), (151, 69), (61, 32), (83, 56), (84, 21), (75, 52), (127, 62), (87, 26), (106, 39), (16, 2), (26, 15), (151, 46), (58, 4), (50, 0), (90, 36), (101, 45), (121, 60), (80, 22), (11, 8), (30, 21), (71, 59), (91, 37), (83, 33), (12, 9), (53, 10), (84, 34), (116, 66), (128, 40), (139, 49), (49, 12), (150, 64), (15, 19), (120, 72), (140, 50), (132, 46), (18, 24), (63, 32), (42, 9), (146, 66), (11, 21), (116, 43), (135, 56), (147, 30), (85, 55), (64, 32), (3, 22), (109, 40), (128, 53), (18, 1), (59, 39), (151, 36), (150, 77), (82, 22), (19, 2), (143, 37), (115, 55), (60, 39), (53, 0), (25, 18), (124, 60), (56, 5), (116, 56), (34, 23), (150, 54), (7, 5), (26, 18), (119, 66), (70, 61), (71, 26), (131, 40), (82, 35), (44, 8), (123, 72), (115, 68), (135, 46), (127, 42), (45, 9), (120, 39), (67, 33), (118, 78), (150, 67), (134, 59), (146, 33), (6, 22), (123, 49), (115, 45), (33, 12), (124, 50), (116, 46), (136, 24), (22, 2), (127, 55), (59, 6), (3, 25), (150, 44), (21, 15), (123, 62), (115, 58), (135, 36), (85, 35), (3, 2), (47, 8), (66, 58), (142, 53), (134, 49), (119, 69), (123, 39), (33, 2), (145, 63), (138, 24), (2, 14), (130, 56), (150, 34), (36, 12), (148, 73), (5, 24), (151, 78), (63, 2), (58, 36), (61, 41), (40, 18), (6, 25), (133, 66), (104, 39), (122, 56), (16, 11), (88, 36), (126, 62), (5, 1), (17, 12), (76, 61), (134, 39), (100, 46), (132, 78), (133, 43), (6, 2), (2, 4), (35, 1), (122, 69), (1, 8), (126, 39), (65, 29), (16, 24), (117, 76), (150, 24), (151, 68), (9, 21), (61, 31), (8, 25), (125, 52), (62, 32), (103, 33), (84, 56), (16, 1), (107, 39), (151, 45), (17, 2), (58, 3), (76, 51), (121, 59), (27, 15), (133, 33), (91, 36), (61, 44), (102, 45), (81, 22), (54, 5), (125, 65), (12, 8), (31, 21), (23, 17), (84, 33), (135, 78), (13, 9), (72, 58), (64, 54), (47, 1), (129, 40), (120, 71), (140, 49), (5, 4), (132, 45), (151, 58), (50, 12), (19, 24), (11, 20), (143, 59), (12, 21), (116, 78), (1, 11), (128, 52), (148, 30), (86, 55), (65, 32), (151, 35), (19, 1), (82, 57), (83, 22), (146, 78), (20, 2), (60, 38), (124, 59), (116, 55), (34, 22), (49, 1), (18, 13), (151, 48), (58, 6), (19, 14), (30, 23), (71, 61), (83, 35), (135, 45), (45, 8), (116, 68), (22, 24), (127, 77), (14, 20), (151, 25), (68, 27), (150, 66), (121, 39), (119, 78), (79, 42), (105, 36), (124, 49), (116, 45), (135, 58), (108, 41), (127, 54), (34, 12), (3, 24), (149, 78), (128, 55), (132, 25), (151, 38), (60, 5), (123, 61), (115, 57), (135, 35), (60, 41), (116, 58), (3, 1), (14, 10), (70, 27), (130, 78), (150, 56), (15, 11), (134, 48), (119, 68), (70, 63), (82, 37), (33, 1), (124, 39), (115, 70), (2, 13), (135, 48), (122, 78), (93, 51), (3, 14), (150, 33), (59, 31), (78, 44), (89, 53), (90, 18), (63, 1), (150, 69), (134, 61), (6, 24), (131, 55), (104, 38), (115, 47), (135, 25), (41, 18), (64, 1), (105, 39), (116, 48), (130, 68), (150, 46), (28, 20), (77, 61), (21, 17), (133, 78), (44, 0), (10, 7), (115, 60), (2, 3), (122, 68), (73, 63), (36, 1), (118, 70), (17, 24), (142, 55), (134, 51), (146, 25), (66, 1), (145, 65), (2, 16), (43, 17), (107, 38), (130, 58), (17, 1), (150, 36), (76, 50), (61, 43), (125, 64), (144, 77), (62, 44), (122, 58), (72, 57), (24, 17), (136, 78), (55, 4), (47, 0), (99, 47), (28, 23), (48, 1), (121, 71), (6, 4), (20, 24), (125, 77), (12, 20), (51, 11), (149, 25), (1, 10), (126, 41), (117, 78), (129, 52), (92, 21), (151, 70), (20, 1), (83, 57), (75, 53), (122, 48), (87, 27), (106, 40), (130, 25), (147, 77), (107, 41), (151, 47), (50, 1), (148, 78), (121, 61), (80, 23), (141, 39), (19, 13), (71, 60), (83, 34), (20, 14), (31, 23), (137, 41), (51, 1), (124, 71), (84, 35), (46, 8), (64, 56), (49, 13), (128, 77), (15, 20), (120, 73), (140, 51), (151, 60), (69, 27), (42, 10), (91, 51), (32, 1), (64, 33), (128, 54), (147, 67), (132, 24), (151, 37), (150, 78), (61, 0), (132, 60), (133, 25), (62, 1), (60, 40), (31, 13), (124, 61), (116, 57), (57, 7), (15, 10), (129, 32), (120, 63), (140, 41), (151, 50), (70, 62), (71, 27), (42, 0), (82, 36), (131, 77), (115, 69), (135, 47), (127, 43), (34, 1), (93, 50), (116, 70), (136, 48), (120, 40), (151, 27), (150, 68), (134, 60), (79, 44), (144, 24), (30, 2), (94, 23), (33, 13), (64, 0), (124, 51), (116, 47), (135, 60), (136, 25), (127, 56), (87, 20), (65, 1), (130, 67), (150, 45), (132, 27), (142, 77), (29, 20), (101, 39), (11, 2), (131, 67), (63, 49), (123, 63), (115, 59), (135, 37), (45, 0), (85, 36), (116, 60), (3, 3), (136, 38), (22, 16), (128, 34), (74, 63), (139, 43), (66, 59), (150, 58), (142, 54), (134, 50), (18, 18), (146, 24), (119, 70), (79, 34), (123, 40), (145, 64), (115, 72), (2, 15), (135, 50), (147, 24), (3, 16), (130, 57), (89, 19), (150, 35), (14, 25), (78, 46), (90, 20), (63, 3), (134, 63), (40, 19), (123, 53), (115, 49), (145, 77), (14, 2), (74, 53), (126, 63), (86, 27), (78, 23), (150, 48), (134, 40), (48, 0), (29, 23), (52, 6), (2, 5), (126, 40), (13, 20), (16, 25), (150, 25), (118, 72), (9, 22), (134, 53), (48, 13), (62, 33), (122, 47), (25, 2), (2, 18), (107, 40), (126, 53), (59, 0), (148, 77), (61, 45), (80, 58), (81, 23), (31, 22), (137, 40), (51, 0), (62, 46), (122, 60), (32, 23), (72, 59), (64, 55), (65, 56), (151, 59), (129, 77), (121, 73), (80, 35), (141, 51), (43, 9), (149, 27), (1, 12), (126, 43), (118, 39), (65, 33), (28, 2), (88, 53), (133, 24), (151, 72), (62, 0), (145, 34), (106, 42), (32, 13), (130, 27), (129, 31), (151, 49), (58, 7), (9, 2), (121, 63), (8, 6), (27, 19), (30, 24), (83, 36), (54, 9), (72, 26), (116, 69), (136, 47), (127, 78), (1, 2), (151, 26), (68, 28), (121, 40), (151, 62), (79, 43), (30, 1), (90, 52), (125, 46), (11, 24), (145, 24), (31, 2), (135, 59), (34, 13), (65, 0), (128, 56), (88, 20), (147, 69), (151, 39), (57, 32), (61, 2), (101, 38), (11, 1), (144, 36), (30, 14), (63, 48), (102, 39), (60, 42), (12, 2), (56, 8), (116, 59), (136, 37), (22, 15), (74, 62), (139, 42), (46, 0), (86, 36), (150, 57), (129, 34), (120, 65)]

# Define movement costs (you can adjust these as needed)
MOVE_STRAIGHT_COST = 1
MOVE_DIAGONAL_COST = math.sqrt(2)

# Define the output file path
OUTPUT_FILE = "path_output.path"

# Define a class to represent each node on the grid
class Node:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.g = float('inf')  # cost from start node
        self.h = float('inf')  # estimated cost to goal node
        self.f = float('inf')  # total cost
        self.parent = None
        self.obstacle = False  # whether the node is an obstacle

    def __lt__(self, other):
        return self.f < other.f



# Create a grid of nodes
grid = [[Node(x, y) for y in range(GRID_HEIGHT)] for x in range(GRID_WIDTH)]

# Set the obstacle flag for nodes that contain obstacles
for obstacle in OBSTACLES:
    grid[obstacle[0]][obstacle[1]].obstacle = True

# Heuristic function for estimating the distance between two nodes (Manhattan distance)
def heuristic(node_a, node_b):
    return abs(node_a.x - node_b.x) + abs(node_a.y - node_b.y)
def changed_direction(curr_node, prev_node, prev_prev_node):
    x_delta = curr_node.x - prev_node.x
    y_delta = curr_node.y - prev_node.y
    old_x_delta = prev_node.x - prev_prev_node.x
    old_y_delta = prev_node.y - prev_prev_node.y
    if (x_delta == old_x_delta and y_delta == old_y_delta):
        return False
    return True
#im gay
def reverse_linked_list(head):
    prev_node = None
    current_node = head

    while current_node is not None:
        next_node = current_node.parent
        current_node.parent = prev_node
        prev_node = current_node
        current_node = next_node

    # Return the new head of the reversed linked list
    return prev_node

# Function to generate the path from the goal node to the start node
def generate_path(end_node):
    path = []
    current_node = reverse_linked_list(end_node)
    prev_control = None
    
    prev_node = None
    prev_prev_node = None
    delay = 2
    did_change_dir = True

    while current_node is not None:
        delay -= 1
        
        anchor_point = {
            "x": current_node.x / 10,
            "y": current_node.y / 10
        }
        
        waypoint = {
            "anchorPoint": anchor_point,
            "prevControl": prev_control,
            "nextControl": None,
            "holonomicAngle": 0,
            "isReversal": False,
            "velOverride": None,
            "isLocked": False,
            "isStopPoint": False,
            "stopEvent": {
                "names": [],
                "executionBehavior": "parallel",
                "waitBehavior": "none",
                "waitTime": 0
            }
        }
        if (did_change_dir or current_node.parent is None):
            path.append(waypoint)
        prev_control = anchor_point
        
        prev_prev_node = prev_node
        prev_node = current_node
        current_node = current_node.parent


        if (current_node is not None and prev_node is not None and prev_prev_node is not None and (delay <= 0)):
            did_change_dir = changed_direction(current_node, prev_node, prev_prev_node)
    # Update the nextControl values
    for i in range(len(path)-1):
        path[i]["nextControl"] = path[i+1]["anchorPoint"]
    
    # Set prevControl to None for the first waypoint
    path[0]["prevControl"] = None
    
    # Set nextControl to None for the last waypoint
    path[-1]["nextControl"] = None
    
    return path

# A* algorithm implementation
def astar():
    # Create the priority queue
    open_set = PriorityQueue()
    
    # Initialize the start node
    start_node = grid[START[0]][START[1]]
    start_node.g = 0
    start_node.h = heuristic(start_node, grid[GOAL[0]][GOAL[1]])
    start_node.f = start_node.g + start_node.h
    open_set.put(start_node)
    
    while not open_set.empty():
        # Get the node with the lowest f-score from the open set
        current_node = open_set.get()
        
        # Check if the goal has been reached
        if current_node.x == GOAL[0] and current_node.y == GOAL[1]:
            return current_node
        
        # Explore the neighboring nodes
        neighbors = []
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue
                
                new_x = current_node.x + dx
                new_y = current_node.y + dy
                
                if 0 <= new_x < GRID_WIDTH and 0 <= new_y < GRID_HEIGHT:
                    neighbors.append(grid[new_x][new_y])
        
        for neighbor in neighbors:
            if neighbor.obstacle:
                continue
            
            # Calculate the tentative g-score for the neighbor
            if abs(neighbor.x - current_node.x) + abs(neighbor.y - current_node.y) == 1:
                tentative_g_score = current_node.g + MOVE_STRAIGHT_COST
            else:
                tentative_g_score = current_node.g + MOVE_DIAGONAL_COST
            
            if tentative_g_score < neighbor.g:
                # Update the neighbor's properties
                neighbor.parent = current_node
                neighbor.g = tentative_g_score
                neighbor.h = heuristic(neighbor, grid[GOAL[0]][GOAL[1]])
                neighbor.f = neighbor.g + neighbor.h
                
                # Add the neighbor to the priority queue
                if neighbor not in open_set.queue:
                    open_set.put(neighbor)
    
    # No path found
    return None

def bresenham_line(x0, y0, x1, y1):
    points = []
    dx = abs(x1 - x0)
    dy = abs(y1 - y0)
    sx = -1 if x0 > x1 else 1
    sy = -1 if y0 > y1 else 1
    err = dx - dy

    while True:
        points.append((x0, y0))

        if x0 == x1 and y0 == y1:
            break

        e2 = 2 * err
        if e2 > -dy:
            err -= dy
            x0 += sx
        if e2 < dx:
            err += dx
            y0 += sy

    return points


for spe in NO_GO:
    for i in range(4):
        p1 = spe.points[i]
        p2 = spe.points[(i+1)%4]
        OBSTACLES += bresenham_line(p1[0], p1[1], p2[1], p2[1])


# Run the A* algorithm
path = astar()

# Generate the output file in .path format
output_data = {
    "waypoints": [],
    "markers": []
}

if path is not None:
    output_data["waypoints"] = generate_path(path)
else:
    print("No path found")

# Write the output file
with open(OUTPUT_FILE, 'w') as file:
    json.dump(output_data, file, indent=2)


def main():
    astar()
    


if __name__ == "__main__":
    main()
